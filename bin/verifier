#!/usr/bin/env node

/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla BrowserID.
 *
 * The Initial Developer of the Original Code is Mozilla.
 * Portions created by the Initial Developer are Copyright (C) 2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Brian J Brennan <brian@nyhacker.org>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

const
util = require("util"),
path = require('path'),
url = require('url'),
fs = require('fs'),
express = require('express'),
certassertion = require('../lib/verifier/certassertion.js'),
metrics = require('../lib/metrics'),
heartbeat = require('../lib/heartbeat'),
logger = require('../lib/logging').logger,
config = require('../lib/configuration'),
shutdown = require('../lib/shutdown');

logger.info("verifier server starting up");

var app = express.createServer();

// setup health check / heartbeat (before logging)
heartbeat.setup(app);

// request to logger, dev formatted which omits personal data in the requests
app.use(express.logger({
  format: config.get('express_log_format'),
  stream: {
    write: function(x) {
      logger.info(typeof x === 'string' ? x.trim() : x);
    }
  }
}));

app.use(express.bodyParser());

app.post('/verify', function(req, resp, next) {
  req.body = req.body || {}

  var assertion = (req.query && req.query.assertion) ? req.query.assertion : req. body.assertion;
  var audience = (req.query && req.query.audience) ? req.query.audience : req.body.audience;

  if (!(assertion && audience)) {
    return resp.json({ 
      status: "failure", 
      reason: "need assertion and audience" 
    });
  }

  certassertion.verify(
    assertion, audience,
    function(email, audienceFromAssertion, expires, issuer) {
      resp.json({
        status: "okay",
        email: email,
        audience: audience, // NOTE: we return the audience formatted as the RP provided it, not normalized in any way.
        expires: expires.valueOf(),
        issuer: issuer
      });
      metrics.report("verify", {
        result: "success",
        rp: audienceFromAssertion
      });
    },
    function(error) {
      resp.json({
        status: "failure", 
        reason: (error ? error.toString() : "unknown")
      });
      metrics.report("verify", {
        result: "failure",
        rp: audience
      });
    });
});

// shutdown when /code_update is invoked
shutdown.installUpdateHandler(app);

// shutdown nicely on signals
shutdown.handleTerminationSignals(app);

var bindTo = config.get('bind_to');
app.listen(bindTo.port, bindTo.host, function(conn) {
  logger.info("running on http://" + app.address().address + ":" + app.address().port);
});
