#!/usr/bin/env node

var child_process = require('child_process'),
    path = require('path'),
    _ = require('underscore'),
    fs = require('fs'),
    glob = require('minimatch'),
    temp = require('temp'),
    which = require('which'),
    parseReport = require('./lib/convert_results.js').parseReport,
    events = require('events'),
    util = require('util'),
    mkdirp = require('mkdirp');

function runCmd(cmd, opts, cb) {
  if (!cb) {
    cb = opts;
    opts = { cwd: path.dirname(__dirname) };
  }
  var cp = child_process.exec(cmd, opts, function(err, stdout, stderr) {
    cb(err, stdout, stderr);
  });
}

function TestRunner() {
  events.EventEmitter.call(this);
}

util.inherits(TestRunner, events.EventEmitter);

// path to automation_tests
const testPath = path.join(path.dirname(__dirname), "automation-tests");

// ephemeral files to hold various credentials desired by py.test gunk
const sauceYAMLPath = temp.path({suffix: '.yaml'}),
      credentialsYAMLPath = temp.path({suffix: '.yaml'});

// python arguments common to all tests
var globalPythonArgs = {
  "-m": "py.test",
  "--credentials": credentialsYAMLPath,
  "--saucelabs": sauceYAMLPath,
  "--webqatimeout": 90,
  "--destructive": null,
  "-q": null,
  '--capabilities': JSON.stringify({ "avoid-proxy":"true"})
};

// python arguments specific to different test classes
var testSpecificPythonArgs = {
  "123done": {
    "--baseurl": "http://dev.123done.org"
  },
  "browserid": {
    "--baseurl": "http://dev.123done.org"
  },
  "myfavoritebeer": {
    "--baseurl": "http://dev.myfavoritebeer.org"
  }
};

var browserSpecificPythonArgs = {
  "linux_firefox_13": {
    '--platform': 'LINUX',
    '--browsername': 'firefox',
    '--browserver': '13'
  },
  "linux_opera_12": {
    '--platform': 'LINUX',
    '--browsername': 'opera',
    '--browserver': '12'
  },
  "osx_firefox_14": {
    '--platform': 'MAC',
    '--browsername':'firefox',
    '--browserver':'14'
  },
  "vista_chrome": {
    '--platform':'VISTA',
    '--browsername':'chrome'
  },
  "vista_firefox_13": {
    '--platform':'VISTA',
    '--browsername':'firefox',
    '--browserver':'13'
  },
  "vista_ie_9": {
    '--platform':'VISTA',
    '--browsername':'internet explorer',
    '--browserver':'9'
  },
  "xp_ie_8": {
    '--platform':'XP',
    '--browsername': 'internet explorer',
    '--browserver':'8'
  }
};

function escape(val) {
  return '"'+val.replace(/(["'$`\\])/g,'\\$1')+'"';
};

// now write a yaml file with sauce creds
function writeSauceYAML() {
  var envVars = {
    'PERSONA_SAUCE_USER': 'username',
    'PERSONA_SAUCE_PASSWORD': 'password',
    'PERSONA_SAUCE_APIKEY': 'api-key'
  };

  var fileContents = "";
  Object.keys(envVars).forEach(function(key) {
    if (!process.env[key]) throw "missing sauce labs creds from environment";
    fileContents += envVars[key] + ": " + process.env[key] + "\n"
  });
  fs.writeFileSync(sauceYAMLPath, fileContents);
}

// now write a yaml file with sauce creds
function writeCredsYAML() {
  var envVars = {
    'PERSONA_EMAIL': 'email',
    'PERSONA_PASSWORD': 'password'
  };

  var fileContents = "default:\n";
  Object.keys(envVars).forEach(function(key) {
    if (!process.env[key]) throw "missing exisiting users creds from environment: " + key;
    fileContents += "    " + envVars[key] + ": " + process.env[key] + "\n"
  });
  fs.writeFileSync(credentialsYAMLPath, fileContents);
}

// setup python testing environment iff required, return path to python
TestRunner.prototype._setupPythonEnv = function(cb) {
  var binPath = path.join(testPath, "bid_selenium", "bin");

  function isSetup(lcb) {
    var pathToPython = path.join(binPath, "python");
    fs.stat(pathToPython, function(err, r) {
      if (!err && r.isFile()) lcb(null, { pathToPython: pathToPython });
      else lcb("not setup");
    });
  }
  function findExecutable(names, cb) {
    if (!names.length) return cb("not found");
    var n = names.shift();
    which(n, function(err, p) {
      if (err) return findExecutable(names, cb);
      cb(null, p);
    });
  }

  isSetup(function(err, r) {
    if (!err) return cb(null, r);

    // time to set it up!
    findExecutable([ 'virtualenv-2.7', 'virtualenv2', 'virtualenv' ], function(err, virtualenv) {
      if (err) return cb("cannot find virtualenv");
      runCmd(virtualenv + " " + path.join(testPath, "bid_selenium"), function(err, stdout) {
        if (err) return cb("cannot run virtualenv: " + err);
        runCmd(path.join(binPath, "pip") + " install -Ur requirements.txt", { cwd: testPath }, function(err, stdout) {
          if (err) cb(err);
          else isSetup(cb);
        });
      });
    });
  });
}

TestRunner.prototype.run = function(opts, cb) {
  var self = this;
  var processesRunning = 0;
  var testReports = [];
  var overallStartTime = new Date();

  // once all tests are complete, crawl through the data and write
  // summary information
  function addSummaryInfo(results) {
    // XXX: calculcate browser and tests summary information
    return {
      duration: ((new Date() - overallStartTime) / 1000.0),
      reports: results
    };
  }

  opts = opts || {};

  writeSauceYAML();
  writeCredsYAML();

  this._setupPythonEnv(function(err, testEnvDetails) {
    if (err) {
      console.log("ERROR: couldn't setup python environment");
      return cb(err);
    }
    Object.keys(browserSpecificPythonArgs).forEach(function(browser) {
      if (opts.browser && !glob(browser, opts.browser.toString())) return;
      var browserArgs = browserSpecificPythonArgs[browser];

      Object.keys(testSpecificPythonArgs).forEach(function(test) {
        if (opts['test-group'] && !glob(test, (opts['test-group']).toString())) return;

        var htmlReportPath = temp.path({suffix: '.html'});
        var testArgs = testSpecificPythonArgs[test];

        // build up the command line arguments
        var cmdargsObj = {};
        _.extend(cmdargsObj, globalPythonArgs, testArgs, browserArgs,
                 { '--webqareport': htmlReportPath });
        var cmdargs = "";
        Object.keys(cmdargsObj).forEach(function(flag) {
          var spc = " ";
          if (flag.substr(2) === '--') spc = "=";
          if (null === cmdargsObj[flag]) {
            cmdargs += flag + " ";
          } else {
            cmdargs += flag + spc + escape(cmdargsObj[flag].toString()) + " ";
          }
        });
        if (opts.single) {
          cmdargs += " " + path.relative(testPath, opts.single);
        } else {
          cmdargs += " " + test;
        }
        self.emit('started', { browser: browser, test: test });
        var startTime = new Date();
        processesRunning++;
        runCmd(testEnvDetails.pathToPython + " " + cmdargs, { cwd: testPath }, function(err, stdout, stderr) {
          var report = {
            browser: browser,
            test: test,
            duration: ((new Date() - startTime) / 1000.0),
            stdout: stdout,
            stderr: stderr,
            err: err,
            passed: !err
          };

          try {
            report.htmlReport = fs.readFileSync(htmlReportPath);
          } catch(e) { }

          // extract key information from the html report and attach it to the report object
          report.results = parseReport(report.htmlReport);

          self.emit('finished', report);

          testReports.push(report);

          // remove artifacts
          fs.unlink(htmlReportPath);

          if (--processesRunning === 0) {
            fs.unlink(sauceYAMLPath);
            fs.unlink(credentialsYAMLPath);
            if (cb) cb(null, addSummaryInfo(testReports));
          }
        });
      });
    });
  });
};

module.exports = TestRunner;

// if we're invoked from the command line, do command liney things
if (process.argv[1] === __filename) {
  process.on('uncaughtException', function(err) {
    console.log("OH NOES", err);
    process.exit(1);
  });

  var argv = require('optimist')
    .usage('Run selenium tests via sauce labs.\nUsage: $0')
    .alias('help', 'h')
    .describe('help', 'display this usage message')
    .alias('list-browsers', 'lb')
    .describe('lb', 'list available browsers to test on')
    .alias('browser', 'b')
    .describe('browser', 'specify which browser to run tests on (globs supported)')
    .alias('list-test-groups', 'lt')
    .describe('list-test-groups', 'list available groups of tests that can be run')
    .alias('test-group', 't')
    .describe('test-group', 'specify which test groups to run (globs supported)')
    .describe('single', 'run a single test within the specified test group')
    .alias('single', 's')
    .default('browser', "linux_firefox_13") // default to a specific browser + test group
    .default("test-group", "123done");  // lest folks accidentally launch large #s of || jobs

  var args = argv.argv;

  if (args.h) {
    argv.showHelp();
    process.exit(0);
  }

  if (args.lb) {
    console.log("available browsers:");
    console.log("   * " + Object.keys(browserSpecificPythonArgs).join("\n   * "));
    process.exit(0);
  }

  if (args.lt) {
    console.log("available tests:");
    console.log("   * " + Object.keys(testSpecificPythonArgs).join("\n   * "));
    process.exit(0);
  }

  // nice file names
  var startTime = new Date();
  function testFileName(browser, test) {
    function pad(n){return n<10 ? '0'+n : n}
    var d = startTime;
    var name = "" +
      d.getFullYear() +
      "." +  pad(d.getMonth()+1)+'.'
      + pad(d.getDate())+'-'
      + pad(d.getHours())+':'
      + pad(d.getMinutes())+':'
      + pad(d.getSeconds());
    name += "-" + browser + "-" + test;
    return name;
  }

  var tester = new TestRunner();
  tester.on('started', function(e) {
    console.log("STARTED:", e.browser + "/" + e.test);
  });

  tester.on('finished', function(report) {
    // save off the report files
    var basename = testFileName(report.browser, report.test);
    var resultsPath = path.join(testPath, "results", basename);
    mkdirp.sync(path.join(testPath, "results"));
    fs.writeFileSync(resultsPath + ".html", report.htmlReport);
    if (report.stderr.length) fs.writeFileSync(resultsPath + ".stderr.txt", report.stderr);
    if (report.stdout.length) fs.writeFileSync(resultsPath + ".stdout.txt", report.stdout);

    var what = report.passed ? "PASSED" : "FAILED";
    console.log(what + ": " + report.browser + "/" + report.test +
                " - " + report.duration.toFixed(2) + "s (" +
               path.relative(process.cwd, resultsPath + ".html") + ")");

    if (!report.passed) {
      Object.keys(report.results).forEach(function (resultName) {
        var result = report.results[resultName];
        if (result.success) return;
        console.log("   " + result.class + ": " + result.url);
      });
      if (report.stderr.length) {
        console.log("   ERRORS:\n     > " +  report.stderr.split("\n").join("\n     >  "));
      }
    }
  });
  tester.run(args, function(report) {
    // We would like to summarize:
    //   1. total test duration
    //   2. number of browsers failing
    //   3. number of tests failing
    // XXX: after ALL tests complete output a short summary
//    console.log(JSON.stringify(report, null, "  "));
  });
}
